---
description: Auth.js (NextAuth) Email Provider with Nodemailer (Gmail) and session usage
globs: *.ts,*.tsx
---
### Authentication – Auth.js Email (Nodemailer via Gmail)

- **Flow**:
  1. User enters email in `SignInForm` → POSTs form with `csrfToken` to `/api/auth/signin/nodemailer`.
  2. Auth.js sends a magic link via Gmail using Nodemailer.
  3. User clicks the link; Auth.js verifies the token and creates a session.
  4. Server Components and API routes access the session via `auth()` from `@/auth`.
  5. Sign-out via `signOut()` (server/client) which clears the session cookie.

- **Client form**:
  - Use `getCsrfToken()` from `next-auth/react` and include it as a hidden `csrfToken` field.
  - No `localStorage` is required.

- **Sessions**:
  - Managed by Auth.js; session is available on the server via `await auth()`.
  - Cookies are `httpOnly` and should be `secure` in production (handled by Auth.js).
  - `pages.signIn` is `/`, so unauthenticated users land on the home page with the form.

- **Security**:
  - Keep Gmail OAuth2 credentials in environment variables; never expose or log tokens.
  - Consider basic rate limiting on the sign-in endpoint to prevent abuse.
  - If adding custom validations, validate and normalize emails on the server.

- **Implementation notes**:
  - Email provider id is `nodemailer`, hence the endpoint `\u002Fapi\u002Fauth\u002Fsignin\u002Fnodemailer`.
  - `FirestoreAdapter` persists verification tokens/users for the Email provider.
  - Prefer `auth()` in Server Components and Route Handlers to authorize requests.

Key files: [src/auth.ts](mdc:src/auth.ts), [src/app/api/auth/[...nextauth]/route.ts](mdc:src/app/api/auth/[...nextauth]/route.ts), [src/components/auth/SignInForm.tsx](mdc:src/components/auth/SignInForm.tsx), [src/app/page.tsx](mdc:src/app/page.tsx)

